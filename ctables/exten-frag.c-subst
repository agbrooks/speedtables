    /*
     * CTable code fragment to do metatable allocation that goes inside the
     * package *_Init code.
     *
     * $Id$
     *
     * Create the master table that has the registered proc table and stuff.
     *
     *  define the following variables and subst this:
     *   table
     */

    t = (ctable_CreatorTable *)ckalloc (sizeof (ctable_CreatorTable));

    /* create the table for registering Tcl commands to appear as methods
     * of the table class and pass it in through Tcl's client data
     * mechanism
     */
    hashTablePtr = (Tcl_HashTable *)ckalloc (sizeof (Tcl_HashTable));
    Tcl_InitCustomHashTable (hashTablePtr, TCL_STRING_KEYS, NULL);

    // setup all the field name objects
    ${table}_setup ();

    t->registeredProcTablePtr = hashTablePtr;
    t->nextAutoCounter = 0;
    t->fieldNames = ${table}_fields;
    t->nameObjList = ${table}_NameObjList;

    t->nFields = $NFIELDS;
    t->nLinkedLists = $NLINKED_LISTS;

    t->fieldTypes = ${table}_types;
    t->fieldsThatNeedQuoting = ${table}_needs_quoting;
    t->keyField = ${table}_keyField;

    // setup the filter objects
    t->filterNames = ${table}_filterNames;
    t->filterFunctions = ${table}_filterFunctions;
    t->nFilters = $NFILTERS;

    // pointers to functions
    t->make_empty_row = ${table}_make_empty_row;
    t->find_row = ${table}_find;

    t->set = ${table}_set;
    t->set_null = ${table}_set_null;

    t->get = ${table}_get;
    t->get_string = ${table}_get_string;

    t->gen_list = ${table}_genlist;
    t->gen_keyvalue_list = ${table}_gen_keyvalue_list;
    t->dstring_append_get_tabsep = ${table}_dstring_append_get_tabsep;
    t->lappend_field = ${table}_lappend_field;
    t->lappend_field_and_name = ${table}_lappend_field_and_name;
    t->lappend_nonnull_field_and_name = ${table}_lappend_nonnull_field_and_name;

    t->array_set = ${table}_array_set;
    t->array_set_with_nulls = ${table}_array_set_with_nulls;

    t->search_compare = ${table}_search_compare;
    t->sort_compare = ${table}_sort_compare;

    t->delete_row = ${table}_delete;

    t->command = ${table}ObjCmd;

    CT_LIST_INIT(&t->instances);

#ifdef SANITY_CHECKS
    t->sanity_check_pointer = ${table}_sanity_check_pointer;
#endif

    // allocate and populate the field info structures
    t->fields = (ctable_FieldInfo **)ckalloc (t->nFields * sizeof (ctable_FieldInfo *));
    for (i = 0; i < t->nFields; i++) {
        ctable_FieldInfo *f;

        f = t->fields[i] = (ctable_FieldInfo *)ckalloc (sizeof (ctable_FieldInfo));

	f->name = ${table}_fields[i];
	f->nameObj = ${table}_NameObjList[i];
	f->number = i;
	f->type = t->fieldTypes[i];
	f->needsQuoting = ${table}_needs_quoting[i];
	f->canBeNull = ${table}_nullable_fields[i];
	f->compareFunction = ${table}_compare_functions[i];
	f->indexNumber = ${table}_index_numbers[i];
	f->unique = ${table}_unique[i];
	f->propKeys = ${table}_propKeys[i];
	f->propValues = (char **)${table}_propValues[i];
    }

    // make a field list -- sure it's a little hokey but it works with
    // other places that take a number of fields and list of fields
    // and with this you can always get all of them
    t->fieldList = (int *)ckalloc (t->nFields * sizeof (int));
    for (i = 0; i < t->nFields; i++) {
	t->fieldList[i] = i;
    }

    // make a *public* field list -- excludes hidden fields (starting with _)
    t->nPublicFields = 0;
    t->publicFieldList = (int *)ckalloc (t->nFields * sizeof (int));
    for (i = 0; i < t->nFields; i++) {
	if(${table}_fields[i][0] == '_')
	    continue;
	t->publicFieldList[t->nPublicFields++] = i;
    }

    /* Create the ${table}MetaObjCmd command -- it's fairly equivalent to an
     * Itcl class in that it can create its own commands with their
     * own data spaces, etc.
     */
    Tcl_CreateObjCommand(interp, "${table}", (Tcl_ObjCmdProc *) ${table}MetaObjCmd, (ClientData)t, (Tcl_CmdDeleteProc *)NULL);

