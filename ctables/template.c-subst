/*
 * CTables
 *
 * define the following variables and subst this to define a metatable command:
 *
 *  rowStructHeadTable - the table that knows about all tables of this
 *   structure type
 *
 *  rowStructTable - an instance of the table defined by the create method
 *   of this command
 *
 *  rowStruct - the C structure describing a row of the table
 *
 *  tableCommand - the name this table-creating command will have
 *
 *  implementationCommand - the command that created tables will execute
 *   to obtain their functionality.
 *
 * $Id$
 *
 */

int
${table}MetaObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
{
    int      optIndex;

    static CONST char *options[] = {
        "create", "info", "null_value", "method", "package", "instances",
	(char *)NULL
    };

    enum options
    {
        OPT_CREATE, OPT_INFO, OPT_NULLVALUE, OPT_METHOD, OPT_PACKAGE,
	OPT_INSTANCES
    };

#ifdef WITH_SHARED_TABLES
    static const char *types[] = { "master", "reader", (char *)NULL };

    enum types { CREATE_MASTER, CREATE_READER };

    static int share_types[] = { CTABLE_SHARED_MASTER, CTABLE_SHARED_READER };
#endif

    ctable_CreatorTable *creator = (ctable_CreatorTable *)clientData;

    CTable *ctable = NULL;

    if (objc < 2) {
      err:
	Tcl_WrongNumArgs (interp, 1, objv, "subcommand ?object? ?args?");
	return TCL_ERROR;
    }

    if (Tcl_GetIndexFromObj(interp, objv[1], options, "option", TCL_EXACT,
        &optIndex) != TCL_OK)
    {
	    return TCL_ERROR;
    }

    switch ((enum options) optIndex) {

        case OPT_CREATE: {
	    int			 i;
	    int			 baseNameLength = 0;
	    char		*commandName;
#ifdef WITH_SHARED_TABLES
	    int			 typeIndex = -1;
	    int			 share_type = CTABLE_SHARED_NONE;
	    char		*share_file = NULL;
	    char		*share_name = NULL;
	    int			 share_panic = TRUE;
	    char		*raw_size = NULL;
	    char		*raw_min_free = NULL;
	    shm_t		*share = NULL;
	    size_t		 share_size = 0;
	    size_t		 share_min_free = 0;
	    int			 share_flags = 0;
	    CTable		*share_ctable = NULL;
	    volatile reader_t	*share_reader = NULL;
	    int			 pid = getpid();
#endif

	    if (objc < 3) {
		Tcl_WrongNumArgs (interp, 2, objv, "name ?type arglist?");
		return TCL_ERROR;
	    }
	    commandName = Tcl_GetString(objv[2]);

	    if (strcmp (commandName, "#auto") == 0) {
		char *objName;

	        objName = Tcl_GetStringFromObj (objv[0], &baseNameLength);
		baseNameLength += 42;
		commandName = (char *) ckalloc (baseNameLength);
		snprintf (commandName, baseNameLength, "%s%lu", objName, creator->nextAutoCounter++);
	    }

#ifdef WITH_SHARED_TABLES
	    //linkup_assoc_data(interp);

	    if(!share_name) share_name = commandName;

	    if (objc >= 5) {
		int	  i;
	        int	  listObjc;
	        Tcl_Obj **listObjv;

		if(Tcl_GetIndexFromObj(interp, objv[3], types, "type", TCL_EXACT, &typeIndex) != TCL_OK)
		    goto createError;

		if(objc == 5) {
            	    // If there's precisely one element in the list, get a new list
            	    // vector from the first element
            	    if (Tcl_ListObjGetElements (interp, objv[4], &listObjc, &listObjv) == TCL_ERROR) {
			Tcl_AppendResult (interp, " while processing key-value list", (char *)NULL);
			goto createError;
		    }
                } else {
                    // new list vector is the old list vector
                    listObjc = objc - 4;
                    listObjv = (Tcl_Obj **)objv + 4;
                }

		if(listObjc & 1) {
		    Tcl_AppendResult(interp, "Odd number of elements in key-value list.", NULL);
		    goto createError;
		}

		// Pull meaningful keys out of key-value list.
		for(i = 0; i < listObjc; i+=2) {
		    char *key = Tcl_GetString(listObjv[i]);

		    if(strcmp(key, "file") == 0)
			share_file = Tcl_GetString(listObjv[i+1]);
		    else if(strcmp(key, "name") == 0)
			share_name = Tcl_GetString(listObjv[i+1]);
		    else if(strcmp(key, "size") == 0)
			raw_size = Tcl_GetString(listObjv[i+1]);
		    else if(strcmp(key, "minfree") == 0)
			raw_min_free = Tcl_GetString(listObjv[i+1]);
		    else if(strcmp(key, "flags") == 0)
			share_flags = parse_flags(Tcl_GetString(listObjv[i+1]));
		    else if(strcmp(key, "panic") == 0) {
			if (Tcl_GetBooleanFromObj (interp, listObjv[i+1], &share_panic) == TCL_ERROR) {
			    Tcl_AppendResult(interp, ", getting 'panic' flag", NULL);
			    goto createError;
			}
		    } else if(strcmp(key, "pid") == 0) {
			if (Tcl_GetIntFromObj (interp, listObjv[i+1], &pid) == TCL_ERROR) {
			    Tcl_AppendResult(interp, ", getting 'pid' value", NULL);
			    goto createError;
			}
		    }
		}

		share_type = share_types[typeIndex];

#ifdef SHARE_BASE
		if(SHARE_BASE != NULL && set_share_base == NULL) {
		    set_share_base = SHARE_BASE;
		    setShareBase(interp, SHARE_BASE);
		}
#endif

		if(share_type == CTABLE_SHARED_MASTER) {

		    if(raw_size) {
			if (!parse_size(raw_size, &share_size)) {
			    Tcl_AppendResult(interp, "Bad size, must be an integer optionally followed by 'k', 'm', or 'g': ", raw_size, NULL);
			    goto createError;
			}
		    } else {
			share_size = DEFAULT_SHARED_SIZE;
		    }

		    if(raw_min_free) {
			if(!parse_size(raw_min_free, &share_min_free)) {
			    Tcl_AppendResult(interp, "Bad free space, must be an integer optionally followed by 'k', 'm', 'g': ", raw_min_free, NULL);
			    goto createError;
			}
		    } else {
			share_min_free = share_size / 10;
			if(share_min_free < MIN_MIN_FREE)
			    share_min_free = MIN_MIN_FREE;
			else if(share_min_free > MAX_MIN_FREE)
			    share_min_free = MAX_MIN_FREE;
		    }

		    if(doCreateOrAttach(interp, share_name, share_file, share_size, share_flags, &share) != TCL_OK)
			goto createError;

		} else {

		    if(doCreateOrAttach(interp, share_name, share_file, ATTACH_ONLY, 0, &share) != TCL_OK)
			goto createError;

		    share_ctable = (CTable *)get_symbol(share, share_name, SYM_TYPE_DATA);
		    if(!share_ctable) {
		        Tcl_AppendResult(interp, "No data in ", share_file, " tagged with ", share_name, NULL);
		        goto createError;
		    }

		    share_reader = pid2reader(share->map, pid);
		    if(!share_reader) {
			Tcl_AppendResult(interp, "Not registered with ", share_file, NULL);
			goto createError;
		    }

		}
	    } else if(objc != 3) {
		Tcl_WrongNumArgs (interp, 2, objv, "name ?type arglist?");
		goto createError;
	    }
#else
	    if (objc != 3) {
		Tcl_WrongNumArgs (interp, 2, objv, "name");
		goto createError;
	    }
#endif

#ifdef WITH_SHARED_TABLES
	    if(share_type == CTABLE_SHARED_MASTER) {
		ctable = (CTable *)shmalloc (share, sizeof(CTable));
		if(!ctable) {
		    if(share_panic) ${table}_shmpanic(ctable);
		    TclShmError(interp, share_name);
		    goto createError;
		}
		ctable->skipLists = NULL; // to tell if we can safely dealloc
		ctable->defaultStrings = NULL;
		ctable->nullKeyValue = NULL;
		ctable->share_file = NULL;
		ctable->share_name = NULL;
		if(!add_symbol(share, share_name, (char *)ctable, SYM_TYPE_DATA)) {
		    Tcl_AppendResult(interp, "Can not save ctable name in share", NULL);
		    goto createError;
		}
	    } else
#endif
	        ctable = (CTable *)ckalloc (sizeof(CTable));

	    ctable->creator = creator;

	    ctable->keyTablePtr = (ctable_HashTable *)ckalloc (sizeof (ctable_HashTable));

	    ctable->count = 0;
	    ctable->autoRowNumber = 0;
	    ctable->destroying = 0;
	    ctable->searching = 0;
	    ctable->nullKeyValue = NULL;

	    ctable->performanceCallbackEnable = 0;
	    ctable->performanceCallback = NULL;
	    ctable->performanceCallbackThreshold = 0.0;

// The logic of this code here has become excessively convoluted
// TODO - CLEAN IT THE HELL UP - peter
#ifdef WITH_SHARED_TABLES
	    ctable->share_type = share_type;
	    ctable->share_panic = share_panic;

	    if(share_name) {
	        ctable->share_name = (char *) ckalloc(strlen(share_name) + 1);
	        strcpy(ctable->share_name, share_name);
	    } else
		ctable->share_name = NULL;

	    if(share_file) {
	        ctable->share_file = (char *) ckalloc(strlen(share_file)+1);
		strcpy(ctable->share_file, share_file);
	    } else
		ctable->share_file = NULL;

	    ctable->share = share;

	    ctable->share_min_free = share_min_free;

	    ctable->share_ctable = share_ctable;

	    ctable->my_reader = share_reader;

	    // call out for this, it's a little complex
	    if (!${table}_setupDefaultStrings(ctable)) {
		if(share_panic) ${table}_shmpanic(ctable);
		TclShmError(interp, share_name);
		goto createError;
	    }

	    if(share_type == CTABLE_SHARED_READER) {
		// use the skiplists and so on from the master.
		ctable->nullKeyValue = ctable->share_ctable->nullKeyValue;
		ctable->skipLists = ctable->share_ctable->skipLists;
		ctable->ll_head = ctable->share_ctable->ll_head;
		ctable->keyTablePtr = NULL;
	    } else {
	        if(share_type == CTABLE_SHARED_MASTER) {
	            // Allocate, and initialize nullKeyValue
	            ctable->nullKeyValue = (char *)shmalloc (share, sizeof "");
		    if(!ctable->nullKeyValue) {
		        if(share_panic) ${table}_shmpanic(ctable);
		        TclShmError(interp, share_name);
		        goto createError;
		    }
		    ctable->nullKeyValue[0] = '\0';

		    // create an array of pointers to possible skip lists,
		    // one per field
	            ctable->skipLists = (jsw_skip_t **)shmalloc (share, creator->nFields * sizeof (jsw_skip_t *));
		    if(!ctable->skipLists) {
		        if(share_panic) ${table}_shmpanic(ctable);
			TclShmError(interp, share_name);
			goto createError;
		    }
	        } else
#endif
		    ctable->skipLists = (jsw_skip_t **)ckalloc (creator->nFields * sizeof (jsw_skip_t *));

	        for (i = 0; i < creator->nFields; i++) {
		    ctable->skipLists[i] = NULL;
	        }

	        // create an array of pointers to possible linked lists,
	        // one for each wanted as determined by gentable
	        ctable_ListInit (&ctable->ll_head, __FILE__, __LINE__);

	        ctable_InitHashTable (ctable->keyTablePtr);
#ifdef WITH_SHARED_TABLES
	    }

	    ctable->was_locked = 0;

	    // OK, we're finished allocating this guy, make sure he's reserved.
	    if(ctable->share)
		use_name(ctable->share, share_name);
#endif

	    ctable->commandInfo = Tcl_CreateObjCommand (interp, commandName, ${table}ObjCmd, (ClientData) ctable, ${table}_cmdDeleteProc);

	    Tcl_SetStringObj (Tcl_GetObjResult (interp), commandName, -1);
	    if (baseNameLength) {
	        ckfree (commandName);
	    }

	    CT_LIST_INSERT_HEAD (&ctable->creator->instances, ctable, instance);

	    return TCL_OK;

          createError:
	    if (baseNameLength) {
	        ckfree (commandName);
	    }

#ifdef WITH_SHARED_TABLES
	    if (share_type == CTABLE_SHARED_READER) {
		ctable = NULL;
	    }

	    if(ctable) {
		if(ctable->share_file) ckfree(ctable->share_file);
		if(ctable->share_name) ckfree(ctable->share_name);
	    }

	    if(share_type == CTABLE_SHARED_MASTER) {
		if(ctable) {
		    if(ctable->nullKeyValue)
			shmfree(share, (void *)ctable->nullKeyValue);
		    if(ctable->defaultStrings)
			shmfree(share, (void *)ctable->defaultStrings);
		    if(ctable->skipLists)
			shmfree(share, (void *)ctable->skipLists);
		    shmfree (share, (void *)ctable);
		    ctable = NULL;
		}
	    }

	    if(share) doDetach(interp, share);
#endif
	    if(ctable)
		ckfree((char *)ctable);

	    return TCL_ERROR;
	}

	case OPT_INFO:
	    if (objc != 2) goto err;
	    return TCL_OK;

	case OPT_NULLVALUE:
	    if (objc > 3) {
		Tcl_WrongNumArgs (interp, 2, objv, "?newValue?");
	    }

	    if (objc == 2) {
	        Tcl_SetObjResult (interp, ${table}_NullValueObj);
		return TCL_OK;
	    }

            Tcl_DecrRefCount (${table}_NullValueObj);
	    ${table}_NullValueObj = objv[2];
	    Tcl_IncrRefCount (objv[2]);
	    Tcl_SetObjResult (interp, objv[2]);
	    return TCL_OK;

	case OPT_METHOD:
	{
	    /* register a new command into the class -- there's a name which
	     * is, like, a method name, and a proc which will be invoked
	     * when the method is invoked
	     */
	    Tcl_HashEntry *hashEntry;
	    int               newVal;

	    if (objc != 4) {
		Tcl_WrongNumArgs (interp, 2, objv, "name proc");
		return TCL_ERROR;
	    }
	    hashEntry = Tcl_CreateHashEntry (creator->registeredProcTablePtr, Tcl_GetString (objv[2]), &newVal);
	    Tcl_IncrRefCount(objv[3]);
	    Tcl_SetHashValue (hashEntry, (ClientData)objv[3]);
	    return TCL_OK;
	}

	case OPT_PACKAGE: {
	    Tcl_SetStringObj (Tcl_GetObjResult (interp), "$::ctable::extension", -1);
	    return TCL_OK;
	}

	/* muster a list of instances created from this table definition */
	case OPT_INSTANCES: {
	    CTable *instanceP;
	    Tcl_Obj *resultObj;

	    if (CT_LIST_EMPTY(&creator->instances)) {
	        return TCL_OK;
	    }
	 
	    resultObj = Tcl_GetObjResult (interp);
	    CT_LIST_FOREACH (instanceP, &creator->instances, instance) {
	        Tcl_Obj *cmdStringObj = Tcl_NewObj();

		Tcl_GetCommandFullName (interp, instanceP->commandInfo, cmdStringObj);
	        Tcl_ListObjAppendElement (interp, resultObj, cmdStringObj);
	    }
	    return TCL_OK;
	}
    }

    panic("never expected to get here");
    return TCL_ERROR;
}

// vim: set ts=8 sw=4 sts=4 noet :
