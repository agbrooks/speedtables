4/28/2016 karl
    * Fix "return" in code bodies of client/server speedtables.
	* Version bump to 1.9.1

12/08/2012 peter
    * Start cleanup for tests

03/08/2011 bovine
    * Add unified autoconf (TEA) system for all of speedtables (issue 15)

    * Release as version 1.8.2

03/07/2011 bovine
    * Release as version 1.8

7/13/2008 peter
    Implemented "search ... -into localTable" and "search ... -buffer localTable".

    remoteTable search ... -into localTable is something I want to implement
    for local ctables as well, as a "select into" operation. This will also
    simplify loading tables with stapi sql: tables.

7/7/2008 peter
    Various changes in ctable_client to handle proper assembling and quoting
    when code doesn't contain a body command.

7/1/2008 peter
    bytesNeeded and incompleteLine need to be per-socket

    Commited change to use uri quoting in ctable_server and ::ncgi::decode
    in ctable_client, to cgi-encode newline and tab in tabsep responses.

    use "remote_enable quote" to enable this option.

6/30/2008 peter
    Fixed handling of nonblocking channel in ctable_server.

    Committed change to handling of uplevel to try and fix break/return
    breakage.

6/15/2008 peter
    Added option "-timeout ms" to remote_ctable to have teh client close
    the socket after it's been idle (no messages sent to the server) for
    "ms" milliseconds.

6/7/8 peter
    Use "-countOnly" to let the ctable server know it shouldn't use a
    multiline response. NOTE - this is not a permanent fix, we really need
    the client to tell the server that it's expecting a multiline response,
    AND we need to extend the protocol to support this and make the whole
    single/multi-line thing cleaner.

6/3/08 karl
    * Wrap close calls in remote_ctable_cache_connect and 
      remote_ctable_cache_disconnect with a catch as we are either
      disconnecting from a previously cached connection, where something
      could have happened (like the connection getting broken) that
      we don't care about any more.  

      Also upon a cache connect attempt, if the socket is in eof state,
      we close it and catch that too, to prevent tracebacks.

3/30/08 peter
    Remove old and in some cases incorrect README files, and updated the
    manual to match.

3/16/08 peter
    Made the corresponding changes to the client side to close the
    connection to the server on an error.

1/29/08 peter
    * Added "sttp" utility command for sending commands to a ctable server
      from a shell script
    * Many changes to ctable_server and ctable_client to get restart logic
      correct.
	Simplified both.
	Added new proc ::ctable_server::serverwait to use instead of
	    "vwait Die" to allow ctable_server to terminate cleanly and
	    do cleanup outside the sttp process.

1/28/08 peter
    Change remote_ctable_send:
    * Call remote_ctable_cache_disconnect on sockets when detecting EOF
      on looking for a response
    Change remote_ctable_cache_connect:
    * Abandon sockets that are at EOF
    * Retry the socket connection, once, after 500 ms
    * discard the invalid connection instead of caching it if the server does
      not respond with a valid ctable_server string.

2/5/08 karl
    * Detect EOF from server socket rather than going into an infinite loop.

8/31/07 peter
    * make 'sttp:' and 'ctable:' synonymous in ctable-server.

1/21/07 karl
    * Add server-side support for search with -array and -array_with_nulls.

01/16/07 peter
    * Send requests and simple responses with newlines in them as
      # NNNN
      multi-line request or
      response NNNN bytes long

    * Make redirect remove cached ctable info in server.

12/30/06 peter

    * Add local "destroy" command to ctable client.
      This allows us to destroy the client without destroying the
      server. Kind of like the Neutron bomb.

    * Add remote "shutdown" and "redirect" to ctable server.
      And redirect ... -shutdown to kill both birds with one stone.

    * Make client *not* follow redirections for "shutdown" and "redirect".
      This allows us to attempt to shutdown a server without worrying
      about taking the wrong server out with friendly fire.

    * Make socket close always remove cached socket info in server.

    * Make socket close always remove cached table info in client.

11/28/06 karl
    * Parse all the variants of the ctable://-style URL including host,
      optional port, directory, table name, and optional stuff.

    * Begin a common code package between the ctable client and server.

11/27/06 karl
    * Use a ctable://-style URL to identify the host, optional port, and
      remote table when specifying a table.

    * Support redirects in the client and server.

    * Uplevel the code body when handling a remote ctable search with -code
      so that that code is at the right level to see variables in its context.

11/28/06 karl
    * Add an identifying message the ctable server sends upon connect
      that the client parses.

11/26/06 karl
    * Make remote search support -tabsep, -code, -key, -array_get, -get and
      -array_get_with_nulls.  Note that -array_get actually doesn't currently
      exclude nulls.
